Deliverables:
   * Vector library proposal
   * Slightly updated task_block proposal
   * New destructive_move proposal?
   


   * Issue from Marshall Clow
      * Look up minutes of issue 2260 from Chicago wiki
   X Wording for weakly parallel progress
   * Update task blocks proposal to add
      X Parallel execution agent for run()
      X feature-test macro
      - In run(), consider changing remarks to notes
   * Send my comments about coroutines to the different coroutine paper
     authors.
   * Language vs. Library checklist
      * Herb Sutter's slide
      * Minutes on the Wiki from Monday, 5/4
   * Check out patent issues regarding reducers for Hartmut
   * Follow up with Chandler re: destructive move
      * Gaby's paper:
        http://www.open-std.org/JTC1/SC22/WG21/docs/papers/2013/n3751.pdf
   X Send operator dot objections to authors/reflector
      * NOOP - these issues are not a problem in N4477
      * Distinction between invocation of member function (automatic) and
        overload resolution for free functions in order to avoid reference
        leakage broken (UPDATE: No it's not.  N4477 tries to avoid reference
        leakage only for the X& = Y() case. I missunderstood the discussion):

          struct X {
              X& operator++();
          };
          X& operator--(X& v);

          struct Y {
              X& operator. ();
          }

          void foo()
          {
              Y v;
              v++;  // OK, invokes v.operator.().operator++();
              v--;  // Not OK, operator--(X&) not matched
          }

          The situation becomes even worse if unified call syntax is accepted.

      * Using an "inheritance" model, the behavior is what you would expect,
        but there is no protection against reference leakage:

          struct Y : proxy X& {
              operator X&();  // Conversion at same rank as derived->base
          };

          void foo()
          {
              Y v;
              v++;  // OK, invokes v.operator X&().operator++();
              v--;  // OK, invokes operator--(v.operator X&());
          }

      * A 2-step system could be used to detect changes through the reference
        (UPDATE: I think N4477 already allows this.  See 'Wrap' example):

          class Y;

          struct Z : proxy X& {
              friend class Y;
              Y *m_y;
              explicit Z(Y* y = nullptr) : m_y(y) { }
            public:
              Z(const Z&) = delete;
              Z(Z&& other) : m_y(other.m_y) { other.m_y = nullptr; }
              ~Z();
              operator X&();
          }

          class Y : proxy Z {
              X m_x;
              friend class Z;
            public:
              operator Z() { return Z(this); }
              void notify();
          };

          Z::~Z() { if (m_y) m_y->notify(); }
          Z::operator X&() { return m_y->m_x; }

          void foo()
          {
              Y v;
              v++;  // Invokes v.operator Z().operator X&().operator++(); ~Z();
              v--;  // Invokes operator--(v.operator Z().operator X&()); ~Z();
          }
