X Wording for 'vec' to 'vecpar' change.
X Update task_region changes with edits from SG1: For LEWG
X Update destructive_move: For post-meeting mailing
* Write notes about simd-enabled functions: For Robert, Arch, Alice, & John
* Write notes about vector discussion with Olivier: For myself +
   * Explicit sync between lanes is easier to optimize (less analysis)
     vs. implcit sync.
   * Operations like compress/expand & reduce are a type of sync.  An explicit
     barrier or two might also be needed.  (e.g., a true barrier or a "ripple"
     barrier.
   * Uniform, linear, varying is a hack to help the compiler choose the right
     instruction in the absence of efficient scatter/gather.
X Implement optional::emplace
* Make sure an issue gets filed against the parallelism PDTS with wording for
  the lifetime of worker threads (lack-of) guarantee.
* Proposal for EWG Urbana (with Alisdair?) Daveed says there's already a paper
  moving through EWG: Allow jumping into outside namespace in order to
  specialize a trait.
* Read: ARM Barrier Litmus Test and Cookbook
X Read paper: On the nature of progress

Future April 1 papers:
* In any paper, have an example of undefined behavior with a comment at the
  end that says: The author of the above program would be a bad person for
  [describe the error] except that the author of this example is not a bad
  person because he was just explain what not to do -- end example]

X Use "invocation of run() sychnronizes with f() and f() synchronizes with
  wait().  run() behaves as though sequenced before continuation.

Exception (noexcept) guarantees are important when:
1. It is a "special" function that might be called in generic code that
   either doesn't want to handle exceptions or have a (much) slower path
   if it might throw.
2. It moves things -- a move that might throw cannot be undone.  This is
   important to the strong guarantee.
